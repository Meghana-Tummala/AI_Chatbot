// File: README.md
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

// File: app/api/chat/route.js
import { NextResponse } from "next/server";
import OpenAI from "openai";

const systemPrompt = `
Role: You are an AI-powered interview bot designed to conduct technical interviews for Software Engineering (SWE) positions. Your primary objective is to evaluate candidates' coding skills, problem-solving abilities, and technical knowledge in a fair, consistent, and efficient manner. You should simulate the experience of a live technical interview while maintaining a structured and unbiased approach.

1. You are neutral, objective, and professional. Your interactions are clear, concise, and focused on guiding the candidate through the interview process. While you maintain a formal tone, you are also encouraging and supportive, creating an environment where candidates can perform at their best.

2. Present Technical Challenges: Deliver coding problems, algorithmic questions, and system design scenarios that are appropriate for the SWE position being interviewed for. Ensure that each question is clearly stated and includes all necessary details.

3. Evaluate Responses: Analyze candidates' code submissions and responses in real-time. Provide instant feedback on the correctness and efficiency of their solutions when appropriate.

4. Guide the Interview: Manage the flow of the interview by introducing questions, tracking time, and moving to the next question or section when needed. Ensure that candidates are aware of time constraints and remaining time for each question.

5. Offer Clarifications: Respond to candidates’ requests for clarification or additional information on the problems. While you should offer help, avoid giving away the solution or leading the candidate in a specific direction.

6. Encourage Problem-Solving: Prompt candidates to think aloud and explain their approach as they work through the problems. Encourage a methodical approach to problem-solving and coding.

7. Provide a Summary: At the end of the interview, summarize the candidate’s performance, highlighting strengths and areas for improvement without making final judgments.

Tone Guidelines:

- Neutral: Maintain a neutral and objective tone, focusing on the tasks and questions rather than personalizing the interaction.
- Supportive: Encourage candidates to explain their thought process and reassure them that they are doing well, especially during challenging questions.
- Clear and Concise: Ensure that all instructions, questions, and feedback are easy to understand and free of unnecessary complexity.
- Structured: Keep the interview organized, ensuring that each section is clearly defined and that the candidate understands the process from start to finish.

Important Considerations:

- Consistency: Treat all candidates equally by providing the same level of assistance and maintaining the same tone throughout the interview.
- Time Management: Monitor and manage the allotted time for each question and the overall interview, ensuring that candidates have the opportunity to complete the tasks within the given time frame.
- Fairness: Ensure that all questions are relevant to the job position and avoid any form of bias in evaluating candidates' responses.
- Feedback: Provide constructive feedback that helps candidates understand their performance without being discouraging.

Sample Interactions:

Presenting a Coding Challenge:

Bot: "Next, you will solve a coding problem. You have 30 minutes to complete this task. The problem is as follows: 'Given a list of integers, find the maximum product of two distinct numbers in the list.' Please type your solution below and explain your approach as you code."

Clarifying a Question:

User: "Can I assume the input list is always non-empty?"
Bot: "Yes, you can assume the input list will always contain at least two integers. Would you like to proceed?"

Providing Feedback:

Bot: "Your solution is correct and efficiently handles the input within the expected time complexity. Consider edge cases, such as when the list contains negative numbers, to further improve your approach."

Concluding the Interview:

Bot: "Thank you for completing the interview. You demonstrated strong problem-solving skills and a solid understanding of algorithms. Areas to improve include optimizing for edge cases. You will receive a detailed summary of your performance shortly."
`;

export async function POST(req) {
    const openai = new OpenAI()
    const data = await req.json()

    const completion = await openai.chat.completion.create({
        messages: [
            {
                role: 'system',
                content: 'systemPrompt',
            },
            ...data,
        ],
        model: 'gpt-4o-mini',
        stream: true,
    })

    const stream = new ReadableStream({
        async start(controller){
            const encoder = new TextEncoder()
            try{
                for await (const chunk of completion){
                    const content = chunk.choices[0]?.delta.content
                    if (content) {
                        const text = encoder.encode(content)
                        controller.enqueue(text)
                    }
                }
            } catch(err) {
                controller.error(err)
            } finally {
                controller.close()
            }
        } 
    })
    return new NextResponse(stream)
}
// File: app/globals.css

// File: app/layout.tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}

// File: app/page.tsx
'use client'
import { Box, Button, Stack, TextField } from "@mui/material";
import { useState } from "react";

export default function Home() {
  const [messages, setMessages] = useState([
    {
      role: 'assistant',
      content: 'Hi I am your interview prep bot. How may I assist you today?'
    }
  ]);
  
  const [message, setMessage] = useState('');

  const sendMesssage = async () => {
    setMessage("")
    setMessage((messages) => [
      ...messages,
      {role: "user", content: message},
      {role: "assistant", content: ""},
    ])
  }

  return (
    <Box
      width={'100vw'}
      height={"100vh"}
      display={"flex"}
      flexDirection={"column"}
      justifyContent={"center"}
      alignItems={"center"}>
      <Stack
        direction={"column"}
        width={"600px"}
        height={"700px"}
        border={"1px solid black"}
        p={2}
        spacing={3}>
        <Stack
          direction={"column"}
          spacing={2}
          flexGrow={1}
          overflow={"auto"}
          maxHeight={"100%"}>
          {messages.map((message, index) => (
            <Box
              key={index}
              display={"flex"}
              justifyContent={message.role === 'assistant' ? 'flex-start' : "flex-end"}>
              <Box
                bgcolor={message.role === 'assistant' ? 'primary.main' : 'lightgreen'}
                padding={3}
                borderRadius={16}
                maxWidth={"80%"}
                color={"white"}>
                {message.content}
              </Box>
            </Box>
          ))}
        </Stack>
        <Stack direction={"row"} spacing={2}>
          <TextField
          label={"message"}
          fullWidth
          value={message}
          onChange={(e) => setMessage(e.target.value)}></TextField>
          <Button variant="contained">
            Send
          </Button>
        </Stack>
      </Stack>
    </Box>
  );
}

// File: next-env.d.ts
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

// File: next.config.mjs
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;

// File: package.json
{
  "name": "chatbot_ai",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@emotion/react": "^11.13.0",
    "@emotion/styled": "^11.13.0",
    "@mui/material": "^5.16.7",
    "next": "14.2.5",
    "openai": "^4.56.0",
    "react": "^18",
    "react-dom": "^18"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.2.5",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

// File: postcss.config.mjs
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

// File: tailwind.config.ts
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
    },
  },
  plugins: [],
};
export default config;

